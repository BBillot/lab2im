# This script shows a usecase of the ImageGenerator wrapper around the lab2im_model.
# It generates 5 synthetic T1-weighted brain MRI scans from a label map.
# Images are generated by sampling a GMM conditioned on this label map. The parameters of the GMM (means and variances)
# are randomly sampled for each image from prior distributions specified in prior_means and prior_stds.
# Here the prior distributions are heavily peaked around T1w intenisty distributions.
# We also perform some data augmentation (spatial transformation, random cropping, random blurring, bias field, gamma
# augmentation), so that the generated images are all different.

# python imports
import os
import logging
import numpy as np

# project imports
from lab2im import utils
from lab2im.image_generator import ImageGenerator

# path training labels directory (can also be path of a single image) and result folder
paths = '../data_example/brain_label_map.nii.gz'
result_folder = '../data_example/generated_images'

# general parameters
n_examples = 5
batchsize = 1
output_shape = 112  # shape of the output images, obtained by randomly cropping the sampled image
output_divisible_by_n = 16  # forces output images to have a shape divisible by 16
prior_distribution = 'normal'  # specifies that the parameters in path_prior_means/stds refer to normal distributions
blur_range = None  # disable randomistaion of the blurring kernels

# materials to load
path_generation_labels = '../data_example/generation_labels.npy'
path_segmentation_labels = '../data_example/segmentation_labels.npy'
path_generation_classes = '../data_example/generation_classes.npy'
path_prior_means = '../data_example/prior_means.npy'
path_prior_stds = '../data_example/prior_stds.npy'

########################################################################################################

# load label list, classes list and intensity ranges if necessary
generation_label_list, generation_neutral_labels = utils.get_list_labels(path_generation_labels, FS_sort=True)
if path_segmentation_labels is not None:
    segmentation_label_list, _ = utils.get_list_labels(path_segmentation_labels, FS_sort=True)
else:
    segmentation_label_list = generation_label_list

# instantiate BrainGenerator object
logging.getLogger('tensorflow').disabled = True
brain_generator = ImageGenerator(labels_dir=paths,
                                 generation_labels=generation_label_list,
                                 output_labels=segmentation_label_list,
                                 generation_classes=path_generation_classes,
                                 prior_means=path_prior_means,
                                 prior_stds=path_prior_stds,
                                 prior_distributions=prior_distribution,
                                 output_shape=output_shape,
                                 output_div_by_n=output_divisible_by_n,
                                 blur_range=blur_range)

if not os.path.exists(os.path.join(result_folder)):
    os.mkdir(result_folder)

for n in range(n_examples):

    # generate new image and corresponding labels
    im, lab = brain_generator.generate_image()

    # save image
    for b in range(batchsize):
        utils.save_volume(np.squeeze(im[b, ...]), brain_generator.aff, brain_generator.header,
                          os.path.join(result_folder, 'minibatch_{}_image_{}.nii.gz'.format(n, b)))
        utils.save_volume(np.squeeze(lab[b, ...]), brain_generator.aff, brain_generator.header,
                          os.path.join(result_folder, 'minibatch_{}_labels_{}.nii.gz'.format(n, b)))
